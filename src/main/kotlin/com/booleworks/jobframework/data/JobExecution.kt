// SPDX-License-Identifier: MIT
// Copyright 2023 BooleWorks GmbH

package com.booleworks.jobframework.data

/**
 * Interface for specifying the execution capacity of an instance.
 *
 * The idea is that an instance may only be free for some (small or high prioritized)
 * jobs, depending on the current workload of the instance.
 *
 * An [ExecutionCapacity] is typically generated by a [ExecutionCapacityProvider], i.e.
 * a function which receives all jobs it is currently running and from that it can
 * decide whether and which kind of jobs it is able to accept.
 */
interface ExecutionCapacity {
    /**
     * `true` if there can be any job for which [isSufficientFor] would return `true`.
     */
    val mayTakeJobs: Boolean

    /**
     * Returns `true` if this instance is able to run the given job.
     */
    fun isSufficientFor(job: Job): Boolean

    companion object {
        /**
         * An execution capacity specifying that the instance will accept any job.
         */
        object AcceptingAnyJob : ExecutionCapacity {
            override val mayTakeJobs = true
            override fun isSufficientFor(job: Job) = true
        }

        /**
         * An execution capacity specifying that the instance will accept no job.
         */
        object AcceptingNoJob : ExecutionCapacity {
            override val mayTakeJobs = false
            override fun isSufficientFor(job: Job) = false
        }
    }
}
/**
 * Takes a (possibly empty) list of jobs which are currently running on this instance and
 * returns an execution capacity.
 */
typealias ExecutionCapacityProvider = (List<Job>) -> ExecutionCapacity
/**
 * Return the job with the highest priority from a given list of jobs.
 * If the list of jobs is not empty, the result must not be `null`.
 */
typealias JobPrioritizer = (List<Job>) -> Job?

/**
 * The default job prioritizer taking the job with the highest priority (i.e. lowest number)
 * and, if there are multiple of such jobs, the one with the earliest creation date.
 */
val DefaultJobPrioritizer: JobPrioritizer = { jobs -> jobs.minWithOrNull(compareBy({ it.priority }, { it.createdAt })) }

/**
 * A tag matcher specifies whether an instance can compute jobs with the given list of tags.
 */
interface TagMatcher {

    /**
     * Returns `true` if the job can be computed by this instance.
     */
    fun matches(job: Job): Boolean

    /**
     * A tag matcher matching all jobs.
     */
    object Any : TagMatcher {
        override fun matches(job: Job) = true
    }

    /**
     * A tag matcher matching jobs which have at least one of the [desiredTags].
     */
    class OneOf(private val desiredTags: List<String>) : TagMatcher {
        override fun matches(job: Job) = desiredTags.intersect(job.tags.toSet()).isNotEmpty()
    }

    /**
     * A tag matcher matching jobs which have all of the [desiredTags].
     */
    class AllOf(private val desiredTags: List<String>) : TagMatcher {
        override fun matches(job: Job) = job.tags.toSet().containsAll(desiredTags)
    }

    /**
     * A tag matcher matching all jobs which have exactly the [desiredTags].
     */
    class Exactly(private vararg val desiredTags: String) : TagMatcher {
        override fun matches(job: Job) = job.tags.toSet() == desiredTags.toSet()
    }
}
